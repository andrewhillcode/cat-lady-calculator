{"version":3,"sources":["components/Label.js","components/Button.js","App.js","reportWebVitals.js","index.js"],"names":["Label","styled","label","props","theme","typography","main","Button","button","primary","color","backgroundColor","availableThemes","background","GlobalStyle","createGlobalStyle","App","useState","themeIndex","setThemeIndex","onClick","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"qOAEMA,EAAQC,IAAOC,MAAV,0CACD,SAAAC,GAAK,OAAIA,EAAMC,MAAMC,WAAWC,QCDpCC,EAASN,IAAOO,OAAV,qEACF,SAAAL,GAAK,OAAIA,EAAMC,MAAMI,OAAOC,QAAQC,SACzB,SAAAP,GAAK,OAAIA,EAAMC,MAAMI,OAAOC,QAAQE,mB,OC0CnDC,EAAkB,CAxCL,CACjBC,WAAY,QACZR,WAAY,CACVC,KAAM,OAERE,OAAQ,CACNC,QAAS,CACPE,gBAAiB,YACjBD,MAAO,WAKK,CAChBG,WAAY,QACZR,WAAY,CACVC,KAAM,SAERE,OAAQ,CACNC,QAAS,CACPE,gBAAiB,OACjBD,MAAO,WAKM,CACjBG,WAAY,SACZR,WAAY,CACVC,KAAM,SAERE,OAAQ,CACNC,QAAS,CACPE,gBAAiB,OACjBD,MAAO,YAQPI,EAAcC,YAAH,uEAEO,SAAAZ,GAAK,OAAIA,EAAMC,MAAMS,cAKvCG,EAAM,WACV,MAAoCC,mBAAS,GAA7C,mBAAOC,EAAP,KAAmBC,EAAnB,KAEA,OACE,eAAC,IAAD,CAAef,MAAOQ,EAAgBM,GAAtC,UACE,cAACJ,EAAD,IACA,cAACP,EAAD,CAAQa,QAAS,WAA0BD,EAAJ,IAAfD,EAAiC,EAAmBA,EAAa,IAAzF,0BACA,cAAClB,EAAD,sBACA,sDCnDSqB,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.8f4fedc0.chunk.js","sourcesContent":["import styled from 'styled-components'\n\nconst Label = styled.label`\n\tcolor: ${props => props.theme.typography.main}\n`\n\nexport {\n\tLabel\n}\n\n","import styled from 'styled-components'\n\nconst Button = styled.button`\n\tcolor: ${props => props.theme.button.primary.color};\n\tbackground-color: ${props => props.theme.button.primary.backgroundColor};\n`\n\nexport {\n\tButton\n}\n\n","import { ThemeProvider } from 'styled-components'\nimport { Label } from './components/Label'\nimport { Button } from './components/Button'\nimport { createGlobalStyle } from 'styled-components'\nimport { useState } from 'react'\n\nconst lightTheme = {\n  background: 'white',\n  typography: {\n    main: 'red'\n  },\n  button: {\n    primary: {\n      backgroundColor: 'lightblue',\n      color: 'black'\n    }\n  }\n}\n\nconst darkTheme = {\n  background: 'black',\n  typography: {\n    main: 'white'\n  },\n  button: {\n    primary: {\n      backgroundColor: 'pink',\n      color: 'black'\n    }\n  }\n}\n\nconst brandTheme = {\n  background: 'yellow',\n  typography: {\n    main: 'white'\n  },\n  button: {\n    primary: {\n      backgroundColor: 'pink',\n      color: 'black'\n    }\n  }\n}\n\n\nconst availableThemes = [lightTheme, darkTheme, brandTheme]\n\nconst GlobalStyle = createGlobalStyle`\n  body {\n    background-color: ${props => props.theme.background};\n  }\n`\n\n\nconst App = () => {\n  const [themeIndex, setThemeIndex] = useState(1)\n\n  return (\n    <ThemeProvider theme={availableThemes[themeIndex]}>\n      <GlobalStyle />\n      <Button onClick={() => {themeIndex === 2 ? setThemeIndex(0) : setThemeIndex(themeIndex + 1)}}>Change theme</Button>\n      <Label>what up</Label>\n      <h1>Hello cat ladies</h1>\n    </ThemeProvider>\n  )\n}\n\nexport {\n  App\n}\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport { App } from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}